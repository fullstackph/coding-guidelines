{"version":3,"sources":["App.js","components/header.js","containers/home.js","serviceWorker.js","index.js","containers/about.js","containers/404.js"],"names":["App","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","basename","className","_components_header__WEBPACK_IMPORTED_MODULE_9__","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","path","exact","component","Home","About","NoRouteMatch","Component","hot","module","Header","style","fontSize","y","react_highlight__WEBPACK_IMPORTED_MODULE_6___default","language","rules","rule","map","item","i","key","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","to","is404"],"mappings":"qNAaMA,mLAEF,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,SAAS,KACnBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAACI,EAAA,EAAD,MAEAN,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,MACjCX,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWE,MAChCZ,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAOG,UAAWG,gBAVZC,aAoBHC,kBAAIC,EAAJD,CAAYhB,kJC/BNkB,mLAEjB,OACEjB,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,OAAKgB,MAAO,CAACC,SAAU,SAAvB,0CAL4BL,6KCiF9BM,UA5ENpB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAWqB,SAAS,QAApB,wsCA4EUtB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,sSAgBJsB,EAAQ,CACb,CACCC,KAAI,mDAEL,CACCA,KAAI,wCAEL,CACCA,KAAI,kCAEL,CACCA,KAAI,wEAEL,CACCA,KAAI,oIAEL,CACCA,KAAI,0CAEL,CACCA,KAAI,6EAEL,CACCA,KAAI,qKAEL,CACCA,KAAI,uJAEL,CACCA,KAAI,8FAEL,CACCA,KAAI,6GAEL,CACCA,KAAI,qFAEL,CACCA,KAAI,uEAEL,CACCA,KAAI,yFAEL,CACCA,KAAI,qDAEL,CACCA,KAAI,sFAGeb,mLAEjB,OACEX,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACjBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBAAf,UAECkB,EAAME,IAAI,SAACC,EAAMC,GAAP,OACT3B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,MAAMuB,IAAKD,GACzB3B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACbqB,EAAKF,MAEPxB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACbe,cAZyBN,2GCzIde,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAnC,EAAAC,cAACH,EAAA,EAAD,MAASsC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gJEhIEhC,mLAEjB,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAM0C,GAAG,KAAT,wBAL2B/B,sICDdgC,mLAEjB,OACE9C,EAAAC,EAAAC,cAAA,8BAH6BY","file":"static/js/main.71975bf0.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { \n  HashRouter, \n  Route,\n  Switch,\n} from 'react-router-dom'\nimport { hot } from 'react-hot-loader'\n\nimport Header from './components/header'\n// import Footer from './components/footer'\nimport Home from './containers/home'\nimport About from './containers/about'\nimport NoRouteMatch from './containers/404'\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter basename=\"/\">\n        <div className=\"App\">\n          <Header />\n\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route component={NoRouteMatch} />\n          </Switch>\n\n          {/* <Footer /> */}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default hot(module)(App);\n","import React, { Component } from 'react'\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <header>\n        <div>Fullstack HQ - Frontend Guidelines</div>\n        <div style={{fontSize: '10px'}}>inspired by Code Guide by @mdo</div>\n      </header>\n    )\n  }\n}","import React, { Component } from 'react'\n\nimport Highlight from 'react-highlight'\n\nimport '../stylesheets/main.scss'\n\nconst x =\n<Highlight language=\"sass\">\n{`@import \"compass/reset\";\n\n// variables\n$colorGreen: #008000;\n$colorGreenDark: darken($colorGreen, 10);\n\n@mixin container {\n    max-width: 980px;\n}\n\n// mixins with parameters\n@mixin button($color:green) {\n    @if ($color == green) {\n        background-color: #008000;\n    }\n    @else if ($color == red) {\n        background-color: #B22222;\n    }\n}\n\nbutton {\n    @include button(red);\n}\n\ndiv,\n.navbar,\n#header,\ninput[type=\"input\"] {\n    font-family: \"Helvetica Neue\", Arial, sans-serif;\n    width: auto;\n    margin: 0 auto;\n    display: block;\n}\n\n.row-12 > [class*=\"spans\"] {\n    border-left: 1px solid #B5C583;\n}\n\n// nested definitions\nul {\n    width: 100%;\n    padding: {\n        left: 5px; right: 5px;\n    }\n  li {\n      float: left; margin-right: 10px;\n      .home {\n          background: url('http://placehold.it/20') scroll no-repeat 0 0;\n    }\n  }\n}\n\n.banner {\n    @extend .container;\n}\n\na {\n  color: $colorGreen;\n  &:hover { color: $colorGreenDark; }\n  &:visited { color: #c458cb; }\n}\n\n@for $i from 1 through 5 {\n    .span#{$i} {\n        width: 20px*$i;\n    }\n}\n\n@mixin mobile {\n  @media screen and (max-width : 600px) {\n    @content;\n  }\n}`}\n</Highlight>\n\nconst y = <Highlight>\n{`<!DOCTYPE html>\n<title>Title</title>\n\n<style>body {width: 500px;}</style>\n\n<script type=\"application/javascript\">\n  function $init() {return true;}\n</script>\n\n<body>\n  <p checked class=\"title\" id='title'>Title</p>\n  <!-- here goes the rest of the page -->\n</body>`}    \n</Highlight>\n\nconst rules = [\n\t{\n\t\trule: `Always leave a line space between each section.`,\n\t},\n\t{\n\t\trule: `Avoid using !important if necessary.`,\n\t},\n\t{\n\t\trule: `Use soft tabs with two spaces.`,\n\t},\n\t{\n\t\trule: `When grouping selectors, keep individual selectors to a single line.`,\n\t},\n\t{\n\t\trule: `Don’t prefix property values or color parameters with a leading zero (e.g., .5 instead of 0.5 and -.5px instead of -0.5px).`,\n\t},\n\t{\n\t\trule: `Lowercase all hex values (e.g., #fff).`,\n\t},\n\t{\n\t\trule: `Use shorthand hex values where available (e.g., #fff instead of #ffffff).`,\n\t},\n\t{\n\t\trule: `Quote attribute values in selectors, e.g., input[type=”text”]. They’re only optional in some cases, and it’s a good practice for consistency.`,\n\t},\n\t{\n\t\trule: `Keep classes lowercase and use dashes (not underscores or camelCase). Dashes serve as natural breaks in related class (e.g., .btn and .btn-danger).`,\n\t},\n\t{\n\t\trule: `Keep selectors short and strive to limit the number of elements in each selector to three.`,\n\t},\n\t{\n\t\trule: `Always put a single space between the property and value and no space between the property and the colon.`,\n\t},\n\t{\n\t\trule: `Avoid specifying units for zero values, e.g., margin: 0; instead of margin: 0px;.`,\n\t},\n\t{\n\t\trule: `Reuse your codes as much as possible to minimize the size of files.`,\n\t},\n\t{\n\t\trule: `Mixins are always after the Miscellaneous section for sass (e.g., @include, @extend).`,\n\t},\n\t{\n\t\trule: `Put all media queries in a block at the very end.`,\n\t},\n\t{\n\t\trule: `The rule above can be overruled when the query only applies to a single selector.`,\n\t},\n]\nexport default class Home extends Component {\n  render() {    \n    return (\n      <div className=\"container\">\n\t\t\t\t<div className=\"row row-category\">Sample</div>\n\t\t\t\t{\n\t\t\t\t\trules.map((item, i) => (\n\t\t\t\t\t\t<div className=\"row\" key={i}>\n\t\t\t\t\t\t\t<div className=\"rule\">\n\t\t\t\t\t\t\t\t{item.rule}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"sample\">\n\t\t\t\t\t\t\t\t{y}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\t\n\t\t\t\t\t))\n\t\t\t\t}\n        \n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n        <div>This is the About page</div>\n        <Link to=\"/\">Link to Home</Link>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\n\nexport default class is404 extends Component {\n  render() {\n    return (\n      <div>404 page</div>\n    )\n  }\n}"],"sourceRoot":""}